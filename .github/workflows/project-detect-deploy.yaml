name: Detect, Build & Deploy Project

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  detect:
    name: Detect Added Project
    runs-on: ubuntu-latest
    outputs:
      project-dir: ${{ steps.diff.outputs.directory }}
    steps:
      - name: Checkout full history
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Find changed project directory
        id: diff
        run: |
          files=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
          echo "Changed files:"
          echo "$files"

          dir=$(echo "$files" \
            | grep '/' \
            | head -n1 \
            | cut -d/ -f1)

          if [ -z "$dir" ]; then
            echo "No top-level directory detected; maybe only root files changed."
          else
            echo "Detected directory: $dir"
          fi

          echo "directory=$dir" >> $GITHUB_OUTPUT

      - name: Logging detected dir
        run: echo "â†’ project-dir = '${{ steps.diff.outputs.directory }}'"

  build:
    name: Build & Test Project
    needs: detect
    if: needs.detect.outputs.project-dir != ''
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Docker
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{needs.detect.outputs.project-dir}}
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{needs.detect.outputs.project-dir}}:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/${{ needs.detect.outputs.project-dir }}:cache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/${{ needs.detect.outputs.project-dir }}:cache,mode=max

  deploy:
    name: Deploy Project
    needs: [build, detect]
    if: needs.detect.outputs.project-dir != ''
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    env:
      PROJECT: ${{ needs.detect.outputs.project-dir }}
      DOCKER_USER: ${{ secrets.DOCKER_USERNAME }}
    steps:
      - name: Setup AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: github-actions

      - name: Deploy to EC2
        run: |
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --instance-ids ${{ secrets.EC2_INSTANCE_ID }} \
            --comment      "Deploying $PROJECT" \
            --parameters commands=["bash /home/ubuntu/deploy/deploy.sh $PROJECT $DOCKER_USER"]
            --output text

  register:
    name: Register Project
    needs: [detect, deploy]
    if: needs.detect.outputs.project-dir != ''
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: POST to Projects API
        env:
          API_KEY: ${{ secrets.PORTFOLIO_POST_REQUEST_KEY }}
          PROJECT_DIR: ${{ needs.detect.outputs.project-dir }}
        run: |
          curl -X POST "https://www.jansalama.com/api/projects" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $API_KEY" \
            --data @"$PROJECT_DIR/data.json" \
            --fail
